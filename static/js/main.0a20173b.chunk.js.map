{"version":3,"sources":["logo.svg","utils/FormEvents.js","components/Auth/LoginComponent.js","components/Auth/RegisterComponent.js","components/Auth/RecoverComponent.js","screens/AuthScreen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","inputParsers","date","input","_input$split","split","_input$split2","Object","slicedToArray","month","day","year","concat","uppercase","toUpperCase","number","parseFloat","createFormData","form","data","FormData","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","keys","Symbol","iterator","next","done","name","value","parserName","elements","dataset","parse","parsedValue","parser","get","set","err","return","LoginComponent","state","isEnable","handleShowPassword","evt","_this","setState","preventDefault","target","values","console","log","_this2","this","react_default","a","createElement","Row","className","Col","Form","onSubmit","handleSubmit","Group","controlId","Label","Control","type","placeholder","Text","Button","onClick","e","Check","label","variant","Component","RegisterComponent","RecoverComponent","AuthScreen","Container","Auth_LoginComponent","Auth_RegisterComponent","Auth_RecoverComponent","App","src","logo","alt","href","rel","screens_AuthScreen","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0a20173b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const inputParsers = {\n  date(input) {\n    const [month, day, year] = input.split('/');\n    return `${year}-${month}-${day}`;\n  },\n  uppercase(input) {\n    return input.toUpperCase();\n  },\n  number(input) {\n    return parseFloat(input);\n  },\n};\n\nexport const createFormData = (form) => {\n\n\tconst data = new FormData(form);\n\n\tfor (let name of data.keys()) {\n\n\t\tconst input = form.elements[name];\n\t\tconst parserName = input.dataset.parse;\n\n\t\tif (parserName) {\n\t\n\t\t\tconst parser = inputParsers[parserName];\n\t\t\tconst parsedValue = parser(data.get(name));\n\t\n\t\t\tdata.set(name, parsedValue);\n\t\t}\n\t}\n\n\treturn data;\n};","import React, { Component } from 'react';\n\nimport {\n\tRow,\n\tCol,\n\tForm,\n\tButton\t\n} from 'react-bootstrap';\n\nimport { createFormData } from '../../utils/FormEvents';\n\nclass LoginComponent extends Component {\n\n\tstate = {\n\t\tisEnable: false\n\t};\n\n\thandleSubmit(evt) {\n\t\tevt.preventDefault();\n\t\tconst form = evt.target;\n\t\tconst data = createFormData(form);\n\n\t\t/*\n\t\tfetch('/api/form-submit-url', {\n\t\t\tmethod: 'POST',\n\t\t\tbody: data\n\t\t});\n\t\t*/\n\t\tfor (var value of data.values()) {\n\t\t   console.log(value); \n\t\t}\n\t}\n\n\thandleShowPassword = (isEnable, evt) => {\n\n\t\tthis.setState({isEnable: !isEnable});\n\t}\n\n\trender() {\n\n\t\tconst {isEnable} = this.state;\n\n\t\treturn (\n\t\t\t<Row className=\"Login\">\n\t\t\t\t<Col>\n\t\t\t\t<Form onSubmit={this.handleSubmit}>\n\t  \t\t\t<Form.Group controlId=\"formBasicEmail\">\n\t    \t\t\t<Form.Label>Email address</Form.Label>\n\t\t\t\t    <Form.Control type=\"email\" placeholder=\"Enter email\" name=\"login-email\"/>\n\t\t\t\t    <Form.Text className=\"text-muted\">\n\t\t\t\t      We'll never share your email with anyone else.\n\t\t\t\t    </Form.Text>\n\t  \t\t\t</Form.Group>\n\n\t\t\t  <Form.Group controlId=\"formBasicPassword\">\n\t\t\t    <Form.Label>Password</Form.Label>\n\t\t\t    <Form.Control type={isEnable ? 'text' : 'password'} placeholder=\"Password\" name=\"login-password\"/>\n\t\t\t    <Button type=\"button\" onClick={e => this.handleShowPassword(isEnable, e)}>Show Password</Button>\n\t\t\t  </Form.Group>\n\t\t\t  <Form.Group controlId=\"formBasicChecbox\">\n\t\t\t    <Form.Check type=\"checkbox\" label=\"Check me out\" />\n\t\t\t  </Form.Group>\n\t\t\t  <Button variant=\"primary\" type=\"submit\">\n\t\t\t    Submit\n\t\t\t  </Button>\n\t\t\t\t</Form>;\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t);\n\t}\n}\n\nexport default LoginComponent;","import React, { Component } from 'react';\n\nimport {\n\tRow,\n\tCol,\n\tForm,\n\tButton\t\n} from 'react-bootstrap';\n\nimport { createFormData } from '../../utils/FormEvents';\n\nclass RegisterComponent extends Component {\n\n\thandleSubmit(evt) {\n\t\tevt.preventDefault();\n\n\t\tconst data = createFormData(evt.target);\n\n\t\tfor (var value of data.values()) {\n\t\t   console.log(value); \n\t\t}\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<Row className=\"Register\">\n\t\t\t<Col>\n\n\t\t\t<Form onSubmit={this.handleSubmit}>\n\n\t\t\t\t<Form.Group controlId=\"formBasicEmail\">\n\t    \t\t\t<Form.Label>Name</Form.Label>\n\t\t\t\t    <Form.Control type=\"text\" placeholder=\"Enter full name\" name=\"register-name\"/>\n\t\t\t\t</Form.Group>\n\n\t\t\t\t<Form.Group controlId=\"formBasicEmail\">\n\t    \t\t\t<Form.Label>Email</Form.Label>\n\t\t\t\t    <Form.Control type=\"text\" placeholder=\"Enter email\" name=\"register-email\"/>\n\t\t\t\t</Form.Group>\n\n\t\t\t\t<Form.Group controlId=\"formBasicEmail\">\n\t    \t\t\t<Form.Label>Password</Form.Label>\n\t\t\t\t    <Form.Control type=\"password\" name=\"register-password\"/>\n\t\t\t\t</Form.Group>\n\n\t\t\t\t<Button variant=\"primary\" type=\"submit\">Send</Button>\n\t\t\t</Form>\n\t\t\t\t</Col>\n\t\t\t\n\t\t\t</Row>\n\t\t\t);\n\t}\n}\n\nexport default RegisterComponent;","import React, { Component } from 'react';\n\nimport {\n\tRow,\n\tCol,\n\tForm,\n\tButton\t\n} from 'react-bootstrap';\n\nclass RecoverComponent extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<Row className=\"Recover\">\n\t\t\t<Col>\n\n\t\t\t<Form onSubmit={this.handleSubmit}>\n\n\t\t\t<Form.Group>\n\t\t\t<Form.Label>Username / Email</Form.Label>\n\t\t\t<Form.Control type=\"text\" name=\"recover-username\"/>\n\t\t\t</Form.Group>\n\n\t\t\t<Button variant=\"primary\" type=\"submit\">Send</Button>\n\t\t\t</Form>\n\n\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t);\n\t}\n}\n\nexport default RecoverComponent;","import React, { Component } from 'react';\n\nimport {Container} from 'react-bootstrap';\n\nimport LoginComponent from '../components/Auth/LoginComponent';\nimport RegisterComponent from '../components/Auth/RegisterComponent';\nimport RecoverComponent from '../components/Auth/RecoverComponent';\n\nclass AuthScreen extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<Container className=\"Auth\">\n\n\t\t\t<LoginComponent />\n\t\t\t<RegisterComponent />\n\t\t\t<RecoverComponent />\n\n\t\t\t</Container>\n\t\t\t);\n\t}\n}\n\nexport default AuthScreen;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AuthScreen from './screens/AuthScreen';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n\n        <AuthScreen />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}